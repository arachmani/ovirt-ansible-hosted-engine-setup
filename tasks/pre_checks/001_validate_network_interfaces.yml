---
- name: Network interfaces
  block:
  - name: Detecting interface on existing management bridge
    set_fact:
      bridge_interface="{{ hostvars[inventory_hostname]['ansible_' + bridge_name ]['interfaces']|first }}"
    when: "'ansible_' + bridge_name in hostvars[inventory_hostname]"
    with_items:
      - 'ovirtmgmt'
      - 'rhevm'
    loop_control:
      loop_var: bridge_name
  - debug: var=bridge_interface
  - name: Get all active network interfaces
    vars:
      acceptable_bond_modes: ['active-backup', 'balance-xor', 'broadcast', '802.3ad']
    set_fact:
      otopi_net_host="{{ hostvars[inventory_hostname]['ansible_' + iface_item]['device'] }}"
      type="{{ hostvars[inventory_hostname]['ansible_' + iface_item]['type'] }}"
    when: (
        (
          iface_item != 'lo'
        ) and (
          bridge_interface is not defined
        ) and (
          'active' in hostvars[inventory_hostname]['ansible_' + iface_item] and
          hostvars[inventory_hostname]['ansible_' + iface_item]['active']
        ) and (
          hostvars[inventory_hostname]['ansible_' + iface_item]['type'] != 'bridge'
        ) and (
          hostvars[inventory_hostname]['ansible_' + iface_item]['ipv4'] is defined or
          hostvars[inventory_hostname]['ansible_' + iface_item]['ipv6'] is defined
        ) and (
          (
            hostvars[inventory_hostname]['ansible_' + iface_item]['type'] != 'bonding'
          ) or (
            (
              hostvars[inventory_hostname]['ansible_' + iface_item]['type'] == 'bonding'
            ) and (
              hostvars[inventory_hostname]['ansible_' + iface_item]['slaves'][0] is defined
            ) and (
              hostvars[inventory_hostname]['ansible_' + iface_item]['mode'] in acceptable_bond_modes
            )
          )
        )
      )
    with_items:
      - "{{ ansible_interfaces | map('replace', '-','_') | list }}"
    loop_control:
      loop_var: iface_item
    register: valid_network_interfaces
  - debug: var=valid_network_interfaces
  - name: Generate output list
    set_fact:
      otopi_host_net: >-
        {{ [bridge_interface] if bridge_interface is defined else valid_network_interfaces.results |
        reject('skipped') | map(attribute='ansible_facts.otopi_net_host') | list }}
    register: otopi_host_net
  - debug: var=otopi_host_net
  - name: Validate selected bridge interface if management bridge does not exist
    fail:
      msg: The selected network interface is not valid
    when:
      he_bridge_if not in otopi_host_net and bridge_interface is not defined and not he_just_collect_network_interfaces
...
